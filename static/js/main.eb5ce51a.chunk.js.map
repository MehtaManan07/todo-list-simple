{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","value","text","type","onChange","event","setUpdate","target","onClick","deleteItems","icon","enterAnimation","leaveAnimation","library","add","faTrash","App","state","currentItem","onInputHandler","setState","Date","now","addItem","preventDefault","newItem","console","log","newItems","onDeleteItem","filteredItems","filter","onSubmit","this","id","placeholder","style","overflow","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oUAiCeA,EA7BE,SAACC,GAChB,IAAMC,EAAYD,EAAME,MAAMC,KAAI,SAACC,GACjC,OACE,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC9B,2BACE,2BACEC,MAAOH,EAAKI,KACZC,KAAK,OACLH,IAAKF,EAAKE,IACVI,SAAU,SAACC,GACTX,EAAMY,UAAUD,EAAME,OAAON,MAAOH,EAAKE,QAG7C,8BACE,kBAAC,IAAD,CACEQ,QAAS,WACPd,EAAMe,YAAYX,EAAKE,MAEzBD,UAAU,UACVW,KAAK,UACJ,UAMb,OAAO,iCAAM,kBAAC,IAAD,CAAUC,eAAe,WAAWC,eAAe,YAAYjB,GAArE,MCxBTkB,IAAQC,IAAIC,K,IAyEGC,E,4MAtEbC,MAAQ,CACNrB,MAAO,GACPsB,YAAa,CACXhB,KAAM,GACNF,IAAK,K,EAGTmB,eAAiB,SAACd,GAChB,EAAKe,SAAS,CACZF,YAAa,CACXhB,KAAMG,EAAME,OAAON,MACnBD,IAAKqB,KAAKC,U,EAKhBC,QAAU,SAAClB,GACTA,EAAMmB,iBACN,IAAMC,EAAU,EAAKR,MAAMC,YAE3B,GADAQ,QAAQC,IAAIF,GACI,KAAZA,EAAgB,CAClB,IAAMG,EAAQ,sBAAO,EAAKX,MAAMrB,OAAlB,CAAyB6B,IACvC,EAAKL,SAAS,CACZxB,MAAOgC,EACPV,YAAa,CACXhB,KAAM,GACNF,IAAK,Q,EAKb6B,aAAe,SAAC7B,GACd,IAAM8B,EAAgB,EAAKb,MAAMrB,MAAMmC,QAAO,SAACjC,GAAD,OAAUA,EAAKE,MAAQA,KACrE,EAAKoB,SAAS,CAAExB,MAAOkC,IACvBJ,QAAQC,IAAI,gBAAiBG,I,EAE/BxB,UAAY,SAACJ,EAAMF,GACjB,IAAMJ,EAAQ,EAAKqB,MAAMrB,MACzBA,EAAMC,KAAI,SAACC,GACLA,EAAKE,MAAQA,IAAKF,EAAKI,KAAOA,MAEpC,EAAKkB,SAAS,CAAExB,MAAOA,IACvB8B,QAAQC,IAAI,SAAU/B,I,uDAGtB,OACE,yBAAKG,UAAU,OACb,4BAAQiC,SAAUC,KAAKV,SACrB,0BAAMW,GAAG,cACP,2BACEjC,MAAOgC,KAAKhB,MAAMC,YAAYhB,KAC9BE,SAAU6B,KAAKd,eACfhB,KAAK,OACLgC,YAAY,eAEd,4BAAQhC,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEiC,MAAO,CAAEC,SAAU,UACnBrC,IAAKiC,KAAKhB,MAAMC,YAAYlB,IAC5BS,YAAawB,KAAKJ,aAClBjC,MAAOqC,KAAKhB,MAAMrB,MAClBU,UAAW2B,KAAK3B,iB,GAhERgC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.eb5ce51a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ListItem.css\";\r\nimport FlipMove from 'react-flip-move'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nconst ListItem = (props) => {\r\n  const listItems = props.items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <input\r\n            value={item.text}\r\n            type=\"text\"\r\n            key={item.key}\r\n            onChange={(event) => {\r\n              props.setUpdate(event.target.value, item.key);\r\n            }}\r\n          />\r\n          <span>\r\n            <FontAwesomeIcon\r\n              onClick={() => {\r\n                props.deleteItems(item.key);\r\n              }}\r\n              className=\"faicons\"\r\n              icon=\"trash\"\r\n            />{\" \"}\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return <div> <FlipMove enterAnimation=\"elevator\" leaveAnimation=\"elevator\">{listItems}</FlipMove> </div>;\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\nimport ListItem from \"./ListItem\";\n\nlibrary.add(faTrash);\n\nclass App extends Component {\n  state = {\n    items: [],\n    currentItem: {\n      text: \"\",\n      key: \"\",\n    },\n  };\n  onInputHandler = (event) => {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        key: Date.now(),\n      },\n    });\n  };\n\n  addItem = (event) => {\n    event.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if (newItem !== \"\") {\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items: newItems,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  };\n  onDeleteItem = (key) => {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({ items: filteredItems });\n    console.log(\"filteredItems\", filteredItems);\n  };\n  setUpdate = (text, key) => {\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) item.text = text;\n    });\n    this.setState({ items: items });\n    console.log(\";items\", items);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header onSubmit={this.addItem}>\n          <form id=\"to-do-form\">\n            <input\n              value={this.state.currentItem.text}\n              onChange={this.onInputHandler}\n              type=\"text\"\n              placeholder=\"Enter task\"\n            />\n            <button type=\"submit\">ADD</button>\n          </form>\n        </header>\n        <ListItem\n          style={{ overflow: \"scroll\" }}\n          key={this.state.currentItem.key}\n          deleteItems={this.onDeleteItem}\n          items={this.state.items}\n          setUpdate={this.setUpdate}\n        ></ListItem>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}